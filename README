##跟踪《Django By Example》完成Django项目实例  --Blog
1.创建一个blog项目
2.创建模型
    ①创建Article
        SlugField：
        在django中，slug指有效URL的一部分，能使URL更加清晰易懂
3.创建管理员用户 manager root
    ①注册admin
4.创建一个查询管理器
    我们经常使用Article.objects.all()来进行数据库的查询，在这个语句中，objects其实就是一个manager，manager中封装了一些方
    法，django通过这些方法来进行数据库的操作。
    我们可以通过继承的方式来创建我们自定义的manager。
    ```
    # 创建一个manager
    class ArticleManager(models.Manager):
        def get_queryset(self):
            return super(ArticleManager, self).get_queryset().filter(status="published")
    ```
    在Article类中将其实例化：
    ```
    class Article(models.Model):
        manager = ArticleManager()
    ```
    然后就通过我们自定义的manager返回已经发布过的并且开头为"who"的文章了
    ```
    Article.manager.filter(title__startswith='who')
    ```
5.创建文章列表视图函数：
    ①创建一个列表函数article_list查询所有文章,并渲染list.html页面
    ```
    Article.manager.all()
    ```
    ②在list.html页面页面获取到数据之后，我们希望能够通过点击title来跳转到article_detail.html页面来查看文章详情
    这样的话，我们需要为每篇文章生成一个url才能实现点击跳转操作，那就要用到我们之前创建的slug标称了。
    既然每篇文章都要生成一个url，那么我们可以为Article类定义一个get_absolute_url()方法来获取对应的url
    ```
    def get_absolute_url(self):
        return reverse('article_detail',
                       args=[self.publish.year, self.publish.month, self.publish.day, self.slug])
    ```
    在这个方法中用到了url的反向解析，所以我么需要对url进行定制：
    ```
    re_path('article_detail/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<day>[0-9]{2})/(?P<slug>[\w-]+)/', article_detail,
            name='article_detail')
    ```
    ③拿到了反向解析之后的url后，我们可以以 a 标签的方式在list.html页面中展示出来：
    ```
    {% for article in articles %}
    <a href="{{ article.get_absolute_url }}">{{ article.title }}</a>
    {% endfor %}
    ```
6.创建文章详情函数：
    ①根据步骤⑤的url，我们需要article_detail函数，这个函数必须要有四个参数来接收url的传值，接收到参数后根据参数去查询数
    据库中对应的文章，然后再将数据传给article_detail.html进行类容渲染
    ```
    def article_detail(req, year, month, day, slug):
        article = Article.manager.filter(publish__year=year, publish__month=month, publish__day=day, slug=slug)[0]
        return render(req, 'article_detail.html', locals())
    ```
    ②渲染article_detail.html页面：
    ```
    <h1>{{ article.title }}</h1>
    <p>{{ article.slug }}</p>
    <p>{{ article.body }}</p>
    <p>{{ article.publish }}</p>
    ```
7.分页：
    当文章的数据量过大时，一屏不能够完全显示时就需要用到分页操作，下面我们将对文章列表进行改造,会用到django自带的分页器：
    ```
    def article_list(req):
        articles = Article.manager.all()
        paginator = Paginator(articles, 3)
        nowPage = req.GET.get("nowPage")
        if nowPage:
            try:
                page = paginator.page(nowPage)
            except EmptyPage:
                page = paginator.page(1)
            except PageNotAnInteger:
                page = paginator.page(1)
        else:
            page = paginator.page(1)
        return render(req, 'list.html', locals())
    ```
    然后再html页面中，可以显示页码或者上下页
    ```
    {% for article in page.object_list %}
    <p>文章名称：<a href="{{ article.get_absolute_url }}">{{ article.title }}</a></p>
    {% endfor %}
    {% if page.has_previous %}
        <a href="?nowPage={{ page.previous_page_number }}">上一页</a>
    {% endif %}

    {% if page.has_next %}
        <a href="?nowPage={{ page.next_page_number }}">下一页</a>
    {% endif %}
    ```
8.为文章添加email分享功能：
    在文章详情中添加email分享功能：
    ①通过继承forms.Form创建一个分享信息的表单,该表单包含标题、发起人、接收人、内容，其中内容为非必填项
    ```
    class share_form(forms.Form):
        title = forms.CharField(max_length=20)
        send = forms.EmailField()
        to = forms.EmailField()
        comment = forms.CharField(max_length=50, required=False, widget=forms.Textarea)
    ```
    ②表单对象创建完成后，需要创建一个分享文章的函数：share_article
    ```
    def share_article(req, post_id):
        article = None
        data = None
        if req.method == 'POST':
            article = Article.manager.filter(post_id)[0]
            form = share_form(req.POST)
            if form.is_valid():
                data = form.cleaned_data
        else:
            form = share_form()
        return render(req, 'share_article.html', locals())
    ```
    ③创建share_article.html模板，展示form信息：
    ```
    <form>
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="提交">
    </form>
    ```
    ④配置路由:
    ```
     path('share_article/<int:post_id>/', share_article, name='share_article')
    ```
    ⑤使用django发送email需要在项目的settings.py文件中配置邮箱的smtp服务，在这里我们使用l63邮箱来实现,QQ的邮箱未能成功实
    现
    ```
    EMAIL_USE_TLS = False
    EMAIL_HOST = 'smtp.163.com'
    EMAIL_PORT = 25  端口
    EMAIL_HOST_USER = 'xxx@163.com'
    EMAIL_HOST_PASSWORD = 'xxx'
    DEFAULT_FROM_EMAIL =EMAIL_HOST_USER
    ```
    ⑥将分享文章的函数改造一下使其能够发送邮件：
    ```
    def share_article(req, article_id):
    article = None
    data = None
    article = Article.manager.filter(id=article_id)[0]
    if req.method == 'POST':
        form = share_form(req.POST)
        if form.is_valid():
            data = form.cleaned_data
            subject = "{}({})推荐你阅读文章{}".format(data['title'], data['send'], article.title)
            msg = data['comment']
            send_mail(subject=subject, message=msg, from_email='xxx@163.com', recipient_list={data['to']},
                      fail_silently=True)
            return HttpResponse("ok")
    else:
        form = share_form()
    return render(req, 'share_article.html', locals())
    ```
9.为文章添加评论功能（要求，能够有多级评论）：
    多级树形实现思路如下：
    1.首先循环评论列表，找出父级评论，将父级评论加入到一个空列表中
    2.循环判断父级列表中的每一个父级对象是否有comment_children[]属性，如果没有，则为其添加，如果有就判断父级对象的id和
     评论的parent_id是否一样，一样就把评论添加到父级对象的子列表中
    ①创建一个评论的model：
    ```
    class Comment(models.Model):
        article = models.ForeignKey(Article, on_delete=models.CASCADE) # 关联文章
        user = models.ForeignKey(User, on_delete=models.CASCADE) # 关联用户
        parent_id = models.IntegerField(blank=True, null=True) # 父级评论的id
        content = models.CharField(max_length=100) # 评论内容
        comment_time = models.DateTimeField(default=timezone.now) # 评论时间
    ```
    ②在文章详情中将评论查询出来，并重新构建一个格式化的列表（在这里就运用到了上方所说的实现思路）：
    ```
    def get_comment_list(self, comments):
        # 1.首先循环评论列表，找出父级评论，将父级评论加入到一个空列表中
        # 2.循环判断父级列表中的每一个父级对象是否有comment_children[]属性，如果没有，则为其添加，
        # 如果有就判断父级对象的parent_id和评论的id是否一样，一样就把评论添加到父级对象的子列表中
        comment_list = []
        # 循环查询结果
        for comment in comments:
            # 根据parent_id是否为none来判断是否是父评论，如果是父评论，就将评论追加到列表中
            if comment.parent_id is None:
                comment_list.append(comment)
            # 如果不是父评论，就循环已经盛有父评论的列表
            for child_comment in comment_list:
                # 判断父评论是否具有comment_children属性，如果没有属性，则添加该属性
                if not hasattr(child_comment, 'comment_children'):
                    setattr(child_comment, 'comment_children', [])
                # 判断当前父评论的id和当前子评论的parent_id是否一致，如果一致，说明两条评论时父子关系，再将子评论追加到子列表中
                if child_comment.id == comment.parent_id:
                    child_comment.comment_children.append(comment)
        return comment_list
    ```
    ③在页面中循环，打印评论对象;
    ```
    {% for comment in comment_list %}
        <P>{{ comment }}</P>
        {% if comment.comment_children is not None %}
            {% for child in comment.comment_children %}
                <p>&nbsp;{{ child}}</p>
            {% endfor %}
        {% endif %}
    {% endfor %}
    ```
    经过上面的代码，我们就可以看到评论列表已经实现了，但是这个这个评论并不是完善，它只能实现2级评论列表










